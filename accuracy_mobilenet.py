import tensorflow as tf
import numpy as np
import os
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from keras.models import load_model

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a ·∫£nh test
test_dir = "C:/Users/DELL/Desktop/code/data/test"

# Danh s√°ch nh√£n c·∫£m x√∫c
emotion_labels = ['Angry', 'Fear', 'Happy', 'Sad', 'Surprise']

# Load m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
model = load_model("C:/Users/DELL/Desktop/code/models/emotion_mobilenet.h5")

# Load d·ªØ li·ªáu ·∫£nh t·ª´ th∆∞ m·ª•c test
test_dataset = tf.keras.preprocessing.image_dataset_from_directory(
    test_dir,
    labels="inferred",
    label_mode="int",
    image_size=(48, 48),
    color_mode="grayscale",
    batch_size=32,
    shuffle=False
)

# L·∫•y ·∫£nh v√† nh√£n th·ª±c t·∫ø
X_test = np.concatenate([x for x, y in test_dataset], axis=0)  # ·∫¢nh test
y_test = np.concatenate([y for x, y in test_dataset], axis=0)  # Nh√£n th·∫≠t

# Chuy·ªÉn ·∫£nh grayscale (48,48,1) th√†nh RGB (48,48,3)
X_test = np.repeat(X_test, 3, axis=-1)

# Chu·∫©n h√≥a ·∫£nh v·ªÅ [0,1]
X_test = X_test / 255.0  

# D·ª± ƒëo√°n nh√£n t·ª´ m√¥ h√¨nh
y_pred_prob = model.predict(X_test)
y_pred = np.argmax(y_pred_prob, axis=1)

# T√≠nh ƒë·ªô ch√≠nh x√°c
accuracy = accuracy_score(y_test, y_pred)
print(f"üîπ Accuracy c·ªßa m√¥ h√¨nh: {accuracy * 100:.2f}%")

# In b√°o c√°o chi ti·∫øt (Precision, Recall, F1-score)
print(classification_report(y_test, y_pred, target_names=emotion_labels))

# Hi·ªÉn th·ªã Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)

# Chu·∫©n h√≥a ƒë·ªÉ t·∫°o ma tr·∫≠n t·ª∑ l·ªá (ph·∫ßn trƒÉm)
cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]

# üîπ ƒê·ªïi m√†u `cmap` th√†nh "YlGnBu" (ho·∫∑c m√†u kh√°c b·∫°n th√≠ch)
custom_cmap = "YlGnBu"  # Th·ª≠ ƒë·ªïi th√†nh "coolwarm", "magma", "viridis" n·∫øu mu·ªën

# V·∫Ω bi·ªÉu ƒë·ªì Confusion Matrix theo s·ªë l∆∞·ª£ng
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap=custom_cmap, xticklabels=emotion_labels, yticklabels=emotion_labels)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("MobileNet (S·ªë l∆∞·ª£ng)")
plt.show()

# V·∫Ω bi·ªÉu ƒë·ªì Confusion Matrix theo ph·∫ßn trƒÉm (%)
plt.figure(figsize=(8, 6))
sns.heatmap(cm_normalized, annot=True, fmt=".2f", cmap=custom_cmap, xticklabels=emotion_labels, yticklabels=emotion_labels)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("MobileNet (T·ª∑ l·ªá %)")
plt.show()
